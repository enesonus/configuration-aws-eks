apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: kcl.xeks.aws.platform.upbound.io
  labels:
    provider: aws
    function: kcl
spec:
  writeConnectionSecretsToNamespace: upbound-system
  compositeTypeRef:
    apiVersion: aws.platform.upbound.io/v1alpha1
    kind: XEKS
  mode: Pipeline
  pipeline:
    - step: kcl
      functionRef:
        name: crossplane-contrib-function-kcl
      input:
        apiVersion: krm.kcl.dev/v1alpha1
        kind: KCLRun
        spec:
          source: |
            xrName = option("params")?.oxr?.metadata.name
            providerConfigName = option("params")?.oxr?.spec.parameters.providerConfigName or "default"
            deletionPolicy = option("params")?.oxr?.spec.parameters.deletionPolicy or "Delete"
            region = option("params")?.oxr?.spec.parameters.region or ""
            id = option("params")?.oxr?.spec.parameters.id or ""

            role = {
              apiVersion = "iam.aws.upbound.io/v1beta1"
              kind = "Role"
              metadata.name = xrName + "-iam-role"
              metadata.labels = {
                "role" = "controlplane"
              }
              spec.providerConfigRef.name = providerConfigName
              spec.deletionPolicy = deletionPolicy
              spec.forProvider.assumeRolePolicy = """{
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Principal": {
                                  "Service": [
                                      "eks.amazonaws.com"
                                  ]
                              },
                              "Action": [
                                  "sts:AssumeRole"
                              ]
                          }
                      ]
                    }
                  """
            }

            clusterRolePolicyAttachment = {
              apiVersion = "iam.aws.upbound.io/v1beta1"
              kind = "RolePolicyAttachment"
              metadata.name = xrName + "-cluster-role-policy-attachment"
              spec.providerConfigRef.name = providerConfigName
              spec.deletionPolicy = deletionPolicy
              spec.forProvider = {
                policyArn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
                roleSelector = {
                  matchControllerRef = True
                  matchLabels = {
                    "role" = "controlplane"
                  }
                }
              }
            }

            kubernetesVersion = option("params")?.oxr?.spec.parameters.version or ""
            kubernetesCluster = {
              apiVersion = "eks.aws.upbound.io/v1beta1"
              kind = "Cluster"
              metadata.name = xrName + "-kubernetes-cluster"
              spec.providerConfigRef.name = providerConfigName
              spec.deletionPolicy = deletionPolicy
              spec.forProvider = {
                region = region
                version = kubernetesVersion
                roleArnSelector = {
                  matchControllerRef = True
                  matchLabels = {
                    "role" = "controlplane"
                  }
                }
                vpcConfig = [
                  {
                    endpointPrivateAccess = True
                    subnetIdSelector.matchLabels = {
                      "access" = "public"
                      "networks.aws.platform.upbound.io/network-id" = id
                    }
                  }
                ]
              }
            }

            clusterSecurityGroupId = option("params")?.ocds?[xrName + "-kubernetes-cluster"]?.Resource?.status?.atProvider?.vpcConfig?[0]?.clusterSecurityGroupId
            if clusterSecurityGroupId:
              clusterSecurityGroupImport = {
                apiVersion = "ec2.aws.upbound.io/v1beta1"
                kind = "SecurityGroup"
                metadata.name = clusterSecurityGroupId
                spec.providerConfigRef.name = providerConfigName
                spec.deletionPolicy = deletionPolicy
                spec.forProvider = {
                  region = region
                  tags = {
                    "eks.aws.platform.upbound.io/discovery" = id
                  }
                }
              }

            uid = option("params")?.oxr?.metadata.uid or ""
            connectionSecretNamespace = option("params")?.oxr?.spec.writeConnectionSecretToRef.namespace or "upbound-system"
            kubernetesClusterAuth = {
              apiVersion = "eks.aws.upbound.io/v1beta1"
              kind = "ClusterAuth"
              metadata.name = xrName + "cluster-auth"
              spec.providerConfigRef.name = providerConfigName
              spec.deletionPolicy = deletionPolicy
              spec.forProvider = {
                region = region
                clusterNameSelector.matchControllerRef = True
              }
              spec.writeConnectionSecretToRef = {
                  name = "{}-ekscluster".format(uid)
                  namespace = connectionSecretNamespace
              }
            }

            nodegroupRole = {
              apiVersion = "iam.aws.upbound.io/v1beta1"
              kind = "Role"
              metadata.name = xrName + "-nodegroup-role"
              metadata.labels = {
                "role" = "nodegroup"
              }
              spec.providerConfigRef.name = providerConfigName
              spec.deletionPolicy = deletionPolicy
              spec.forProvider.assumeRolePolicy = """{
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Principal": {
                                  "Service": [
                                      "ec2.amazonaws.com"
                                  ]
                              },
                              "Action": [
                                  "sts:AssumeRole"
                              ]
                          }
                      ]
                    }
                  """
            }

            nodeGroupRolePolicies = [
              "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
              "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy",
              "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
            ]

            nodeGroupRolePolicyAttachments = [{
              apiVersion = "iam.aws.upbound.io/v1beta1"
              kind = "RolePolicyAttachment"
              metadata.name = xrName + "-nodegroup-rpa-{}".format(i)
              spec.providerConfigRef.name = providerConfigName
              spec.deletionPolicy = deletionPolicy
              spec.forProvider = {
                policyArn = p
                roleSelector = {
                  matchControllerRef = True
                  matchLabels = {
                    "role" = "nodegroup"
                  }
                }
              }
            } for i, p in nodeGroupRolePolicies]


            nodeCount = option("params")?.oxr?.spec.parameters.nodes.count or ""
            instanceType = option("params")?.oxr?.spec.parameters.nodes.instanceType or ""
            nodeGroupPublic = {
              apiVersion = "eks.aws.upbound.io/v1beta1"
              kind = "NodeGroup"
              metadata.name = xrName + "-nodegroup-public"
              spec.providerConfigRef.name = providerConfigName
              spec.deletionPolicy = deletionPolicy
              spec.forProvider = {
                region = region
                clusterNameSelector.matchControllerRef = True
                nodeRoleArnSelector = {
                  matchControllerRef = True
                  matchLabels = {
                    "role" = "nodegroup"
                  }
                }
                scalingConfig = [{
                  desiredSize = nodeCount
                  maxSize = 100
                  minSize = 1
                }]
                instanceTypes = [instanceType]
                subnetIdSelector.matchLabels = {
                  "networks.aws.platform.upbound.io/network-id" = id
                  "access" = "public"
                }
              }
            }

            eksAddonNames = ["aws-ebs-csi-driver", "vpc-cni"]
            eksAddons = [{
              apiVersion = "eks.aws.upbound.io/v1beta1"
              kind = "Addon"
              metadata.name = xrName + "-addon-" + a
              spec.providerConfigRef.name = providerConfigName
              spec.deletionPolicy = deletionPolicy
              spec.forProvider = {
                region = region
                addonName = a
                clusterNameSelector.matchControllerRef = True
              }
            } for i, a in eksAddonNames]

            eksOidcIssuer = option("params")?.ocds?[xrName + "-kubernetes-cluster"]?.Resource?.status?.atProvider?.identity?[0]?.oidc?[0]?.issuer or ""
            oidcProvider = {
              apiVersion = "iam.aws.upbound.io/v1beta1"
              kind = "OpenIDConnectProvider"
              metadata.name = xrName + "-oidc-provider"
              spec.providerConfigRef.name = providerConfigName
              spec.deletionPolicy = deletionPolicy
              spec.forProvider = {
                clientIdList = ["sts.amazonaws.com"]
                thumbprintList = ["9e99a48a9960b14926bb7f3b02e22da2b0ab7280"]
                url = eksOidcIssuer
              }
            }

            providerConfigHelm = {
              apiVersion = "helm.crossplane.io/v1beta1"
              kind = "ProviderConfig"
              metadata.name = xrName
              metadata.annotations = {
                  "krm.kcl.dev/ready": "True"
              }
              spec.credentials = {
                  secretRef = {
                    name = "{}-ekscluster".format(uid)
                    namespace = connectionSecretNamespace
                    key = "kubeconfig"
                  }
                  source = "Secret"
                }
            }


            items = [
              role
              clusterRolePolicyAttachment
              kubernetesCluster
              clusterSecurityGroupImport
              kubernetesClusterAuth
              nodegroupRole
              nodeGroupPublic
              oidcProvider
              providerConfigHelm
            ] + nodeGroupRolePolicyAttachments + eksAddons

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready
