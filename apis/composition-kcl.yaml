apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: kcl.xeks.aws.platform.upbound.io
  labels:
    provider: aws
    function: kcl
spec:
  writeConnectionSecretsToNamespace: upbound-system
  compositeTypeRef:
    apiVersion: aws.platform.upbound.io/v1alpha1
    kind: XEKS
  mode: Pipeline
  pipeline:
    - step: kcl
      functionRef:
        name: crossplane-contrib-function-kcl
      input:
        apiVersion: krm.kcl.dev/v1alpha1
        kind: KCLRun
        spec:
          target: Resources
          source: |
            xrName = option("params")?.oxr?.metadata.name
            providerConfigName = option("params")?.oxr?.spec.parameters.providerConfigName or "default"
            deletionPolicy = option("params")?.oxr?.spec.parameters.deletionPolicy or "Delete"
            region = option("params")?.oxr?.spec.parameters.region or ""
            id = option("params")?.oxr?.spec.parameters.id or ""

            role = {
              apiVersion = "iam.aws.upbound.io/v1beta1"
              kind = "Role"
              metadata.name = xrName + "-iam-role"
              metadata.labels = {
                "role" = "controlplane"
              }
              spec.providerConfigRef.name = providerConfigName
              spec.deletionPolicy = deletionPolicy
              spec.forProvider.assumeRolePolicy = """{
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Principal": {
                                  "Service": [
                                      "eks.amazonaws.com"
                                  ]
                              },
                              "Action": [
                                  "sts:AssumeRole"
                              ]
                          }
                      ]
                    }
                  """
            }

            clusterRolePolicyAttachment = {
              apiVersion = "iam.aws.upbound.io/v1beta1"
              kind = "RolePolicyAttachment"
              metadata.name = xrName + "-cluster-role-policy-attachment"
              spec.providerConfigRef.name = providerConfigName
              spec.deletionPolicy = deletionPolicy
              spec.forProvider = {
                policyArn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
                roleSelector = {
                  matchControllerRef = True
                  matchLabels = {
                    "role" = "controlplane"
                  }
                }
              }
            }

            kubernetesVersion = option("params")?.oxr?.spec.parameters.version or ""
            kubernetesCluster = {
              apiVersion = "eks.aws.upbound.io/v1beta1"
              kind = "Cluster"
              metadata.name = xrName + "-kubernetes-cluster"
              spec.providerConfigRef.name = providerConfigName
              spec.deletionPolicy = deletionPolicy
              spec.forProvider = {
                region = region
                version = kubernetesVersion
                roleArnSelector = {
                  matchControllerRef = True
                  matchLabels = {
                    "role" = "controlplane"
                  }
                }
                vpcConfig = [
                  {
                    endpointPrivateAccess = True
                    subnetIdSelector.matchLabels = {
                      "access" = "public"
                      "networks.aws.platform.upbound.io/network-id" = id
                    }
                  }
                ]
              }
            }

            clusterSecurityGroupId = option("params")?.ocds?[xrName + "-kubernetes-cluster"]?.Resource?.status?.atProvider?.vpcConfig?[0]?.clusterSecurityGroupId
            if clusterSecurityGroupId:
              clusterSecurityGroupImport = {
                apiVersion = "ec2.aws.upbound.io/v1beta1"
                kind = "SecurityGroup"
                metadata.name = clusterSecurityGroupId
                spec.providerConfigRef.name = providerConfigName
                spec.deletionPolicy = deletionPolicy
                spec.forProvider = {
                  region = region
                  tags = {
                    "eks.aws.platform.upbound.io/discovery" = id
                  }
                }
              }

            items = [
              role,
              clusterRolePolicyAttachment,
              kubernetesCluster,
              clusterSecurityGroupImport
            ]

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready
